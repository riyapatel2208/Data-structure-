#include <stdio.h>
#include <stdlib.h>  // Added for exit function

#define N 4

void cqinsert(int [], int *, int *, int, int); 
int cqdelete(int [], int *, int *, int);
void display(int [], int, int, int);
void modify(int [], int, int, int, int);

int main() {
    int q[N];
    int front = -1, rear = -1;
    int data, choice, position;

    while (1) {
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Display\n");
        printf("4. Modify\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter a value to insert: ");
                scanf("%d", &data);
                cqinsert(q, &front, &rear, N, data); 
                break;
            case 2:
                data = cqdelete(q, &front, &rear, N); 
                if (data != -1)
                    printf("Deleted %d\n", data); 
                break;
            case 3:
                display(q, front, rear, N); 
                break;
            case 4:
                printf("Enter the position to modify (0-based index from front): ");
                scanf("%d", &position);
                printf("Enter the new value: ");
                scanf("%d", &data);
                modify(q, front, rear, N, position, data);
                break;
            default:
                exit(0);
        }
    }
    return 0;
}

void cqinsert(int q[], int *front, int *rear, int n, int val) {
    if ((*front == 0 && *rear == n - 1) || ((*rear + 1) == *front)) {
        printf("Overflow\n"); 
        return;
    }
    if (*rear == n - 1) 
        *rear = 0;
    else
        *rear = *rear + 1;

    q[*rear] = val;
    if (*front == -1) 
        *front = 0;
}

int cqdelete(int q[], int *front, int *rear, int n) { 
    int data;
    if (*front == -1) { 
        printf("Underflow\n"); 
        return -1;
    }
    data = q[*front];
    if (*front == *rear) {
        *front = *rear = -1; 
        return data;
    }
    if (*front == n - 1) 
        *front = 0;
    else 
        *front = *front + 1;

    return data;
}

void display(int q[], int front, int rear, int n) {
    int i;
    if (front == -1)
        printf("\n\t\tQueue Empty\n");
    else {
        if (front <= rear) {
            printf("\n\t\tFront(=%d)→", front); 
            while (front <= rear) {
                printf("%d ", q[front]); 
                front++;
            }
            printf("<- Rear (= %d)\n", rear);
        } else {
            printf("\n\t\tPos 0→"); 
            i = 0;

            while (i <= rear) {
                printf("%d ", q[i]); 
                i++;
            }
            printf("<- Rear (= %d)", rear);
            if ((rear + 1) != front)
                printf(" - -");

            i = front;
            printf("Front (= %d)->", front);
            while (i <= n - 1) {
                printf("%d ", q[i]);
                i++;
            }
            printf("<- Pos N-1\n");
        }
    }
}

void modify(int q[], int front, int rear, int n, int position, int newValue) {
    if (front == -1) {
        printf("Queue is empty, cannot modify\n");
        return;
    }

    int index = (front + position) % n;

    if (position < 0 || (front <= rear && (index > rear || index < front)) || (front > rear && index < front && index > rear)) {
        printf("Invalid position\n");
        return;
    }

    q[index] = newValue;
    printf("Value at position %d modified to %d\n", position, newValue);
}
