#include <stdio.h>
#include <stdlib.h>

#define MAX 100

void add(int [], int *, int);
void delete(int [], int *, int);
void modify(int [], int, int);
void sort(int [], int);
int simple_search(int [], int, int);
int binary_search(int [], int, int);
void display(int [], int);

int main() {
    int arr[MAX];
    int n = 0; // Current size of the array
    int choice, value, pos;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Add\n");
        printf("2. Delete\n");
        printf("3. Modify\n");
        printf("4. Sort\n");
        printf("5. Simple Search\n");
        printf("6. Binary Search\n");
        printf("7. Display\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                if (n >= MAX) {
                    printf("Array is full\n");
                } else {
                    printf("Enter value to add: ");
                    scanf("%d", &value);
                    add(arr, &n, value);
                }
                break;
            case 2:
                printf("Enter position to delete (0 to %d): ", n-1);
                scanf("%d", &pos);
                if (pos >= 0 && pos < n) {
                    delete(arr, &n, pos);
                } else {
                    printf("Invalid position\n");
                }
                break;
            case 3:
                printf("Enter position to modify (0 to %d): ", n-1);
                scanf("%d", &pos);
                if (pos >= 0 && pos < n) {
                    printf("Enter new value: ");
                    scanf("%d", &value);
                    modify(arr, pos, value);
                } else {
                    printf("Invalid position\n");
                }
                break;
            case 4:
                sort(arr, n);
                printf("Array sorted\n");
                break;
            case 5:
                printf("Enter value to search: ");
                scanf("%d", &value);
                pos = simple_search(arr, n, value);
                if (pos != -1) {
                    printf("Value found at position %d\n", pos);
                } else {
                    printf("Value not found\n");
                }
                break;
            case 6:
                printf("Enter value to search: ");
                scanf("%d", &value);
                pos = binary_search(arr, n, value);
                if (pos != -1) {
                    printf("Value found at position %d\n", pos);
                } else {
                    printf("Value not found\n");
                }
                break;
            case 7:
                display(arr, n);
                break;
            case 8:
                exit(0);
            default:
                printf("Invalid choice\n");
                break;
        }
    }

    return 0;
}

void add(int arr[], int *n, int value) {
    arr[(*n)++] = value;
}

void delete(int arr[], int *n, int pos) {
    for (int i = pos; i < (*n) - 1; i++) {
        arr[i] = arr[i + 1];
    }
    (*n)--;
}

void modify(int arr[], int pos, int value) {
    arr[pos] = value;
}

void sort(int arr[], int n) {
    int temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int simple_search(int arr[], int n, int value) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

int binary_search(int arr[], int n, int value) {
    int low = 0, high = n - 1, mid;
    while (low <= high) {
        mid = (low + high) / 2;
        if (arr[mid] == value) {
            return mid;
        } else if (arr[mid] < value) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}

void display(int arr[], int n) {
    printf("Array elements:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}
