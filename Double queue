#include <stdio.h>
#include <stdlib.h> // Added for the exit() function
#define N 4

void insertFront(int [], int *, int *, int, int);
void insertRear(int [], int *, int *, int, int);
int deleteFront(int [], int *, int *);
int deleteRear(int [], int *, int *);
void display(int [], int, int);
void modify(int [], int, int, int);

int main()
{
    int deque[N];
    int front = -1, rear = -1; 
    int data, choice, position;

    while (1)
    {
        printf("1. Insert Front\n");
        printf("2. Insert Rear\n");
        printf("3. Delete Front\n");
        printf("4. Delete Rear\n");
        printf("5. Display\n");
        printf("6. Modify\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
            case 1: 
                printf("Enter a value to insert at front: "); 
                scanf("%d", &data);
                insertFront(deque, &front, &rear, N, data);
                break;

            case 2: 
                printf("Enter a value to insert at rear: "); 
                scanf("%d", &data);
                insertRear(deque, &front, &rear, N, data);
                break;

            case 3: 
                data = deleteFront(deque, &front, &rear);
                if (data != -1)
                    printf("Deleted from front: %d\n", data);
                break;

            case 4: 
                data = deleteRear(deque, &front, &rear);
                if (data != -1)
                    printf("Deleted from rear: %d\n", data);
                break;

            case 5: 
                display(deque, front, rear); 
                break;

            case 6:
                printf("Enter the position to modify (0-based index): ");
                scanf("%d", &position);
                printf("Enter the new value: ");
                scanf("%d", &data);
                modify(deque, front, rear, position, data);
                break;

            default: 
                exit(0);
        }
    }
}

void insertFront(int deque[], int *front, int *rear, int n, int val)
{
    if ((*front == 0 && *rear == n - 1) || (*front == *rear + 1))
    {
        printf("Overflow\n");
        return;
    }

    if (*front == -1) // Empty deque
    {
        *front = *rear = 0;
    }
    else if (*front == 0)
    {
        *front = n - 1;
    }
    else
    {
        *front = *front - 1;
    }

    deque[*front] = val;
}

void insertRear(int deque[], int *front, int *rear, int n, int val)
{
    if ((*front == 0 && *rear == n - 1) || (*front == *rear + 1))
    {
        printf("Overflow\n");
        return;
    }

    if (*front == -1) // Empty deque
    {
        *front = *rear = 0;
    }
    else if (*rear == n - 1)
    {
        *rear = 0;
    }
    else
    {
        *rear = *rear + 1;
    }

    deque[*rear] = val;
}

int deleteFront(int deque[], int *front, int *rear)
{
    int data;

    if (*front == -1)
    {
        printf("Underflow\n");
        return -1;
    }

    data = deque[*front];

    if (*front == *rear) // Only one element was in deque
    {
        *front = *rear = -1;
    }
    else if (*front == N - 1)
    {
        *front = 0;
    }
    else
    {
        *front = *front + 1;
    }

    return data;
}

int deleteRear(int deque[], int *front, int *rear)
{
    int data;

    if (*rear == -1)
    {
        printf("Underflow\n");
        return -1;
    }

    data = deque[*rear];

    if (*front == *rear) // Only one element was in deque
    {
        *front = *rear = -1;
    }
    else if (*rear == 0)
    {
        *rear = N - 1;
    }
    else
    {
        *rear = *rear - 1;
    }

    return data;
}

void display(int deque[], int front, int rear)
{
    if (front == -1)
    {
        printf("\n\t\tDeque Empty\n");
    }
    else 
    {
        printf("\n\t\tFront(=%d) ->", front);
        int i = front;
        while (1)
        {
            printf(" %d", deque[i]);
            if (i == rear)
                break;
            i = (i + 1) % N;
        }
        printf(" <- Rear(=%d)\n", rear);
    }
}

void modify(int deque[], int front, int rear, int position, int newValue)
{
    if (front == -1)
    {
        printf("Deque is empty, cannot modify\n");
        return;
    }

    int index = (front + position) % N;

    if (position < 0 || (front <= rear && (index > rear || index < front)) || (front > rear && index < front && index > rear))
    {
        printf("Invalid position\n");
        return;
    }

    deque[index] = newValue;
    printf("Value at position %d modified to %d\n", position, newValue);
}
